.homes {
  grid-column: col-start 1 / col-end 8;
  margin: 15rem 0;

  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(25rem, 1fr)); // makes the grid responsive
  grid-gap: 7rem;
}

.home {
  background-color: $color-grey-light-1;

  display: grid;
  grid-template-columns: repeat(2, 1fr); // in general the pattern is to define the columns and let css figure out the rows
  // grid-template-rows: 10fr 2fr 1fr 2fr;
  grid-row-gap: 3.5rem; 

  &__img {
    width: 100%;
    grid-row: 1 / 2; // #1 must force multiple elements to be on top of each other.
    grid-column: 1 / 3;
    z-index: 1;
  }

  &__like {
    fill: $color-primary;
    grid-row: 1 / 2; // #1 must force multiple elements to be on top of each other.
    grid-column: 2 / 3;
    z-index: 2;


    width: 2.5rem;
    height: 2.5rem;

    justify-self: end;
    margin: 1rem;
  }

  &__name {
    grid-row: 1 / 2; // #1 must force multiple elements to be on top of each other.
    grid-column: 1 / 3;

    width: 80%;

    text-align: center;// to center text inside the element
    padding: 1.25rem;
    font-size: 1.6rem;
    font-weight: 400;
    background-color: $color-secondary;
    color: #fff;
    font-family: $font-display;
    z-index: 3;

    justify-self: center; // centers the element horizontally within the grid item
    align-self: end; // puts the element at the bottom of the grid item

    transform: translateY(50%); // pushs the element down 50% of its width
  }

  &__location,
  &__rooms {
    margin-top: 2.5rem;
  }

  &__location,
  &__rooms,
  &__area,
  &__price {
    font-size: 1.5rem;
    margin-left: 2rem;
    display: flex;
    align-items: center; // aligns items in y axis using flex

    svg {
      fill: $color-primary;
      height: 2rem;
      width: 2rem;
      margin-right: 1rem;

    }

  }

  &__btn {
    grid-column: 1 / 3;
  }
}